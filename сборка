from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split


BOT_TOKEN = '6487256586:AAHd1dnxlv62Y9zsM9qR7CUG9G2_QrBX_WU'

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.message(Command(commands=["start"]))
async def process_start_command(message: Message):
    await message.answer(
        'Привет!\nЯ бот, помогающий подобрать игры по описанию!\n Введите описание игры на Английском\n\nHello!\nIm a bot that helps you find games by description!\nEnter a game description in English')


@dp.message(Command(commands=['help']))
async def process_help_command(message: Message):
    await message.answer(
        'Напишите мне описание игры и я постараюсь подобрать что-нибудь по вашим предпочтениям.\nЧем больше описания и подробностей вы напишите, тем лучше мы сможем подобрать вам игру!\n\nWrite me a description of the game and I will try to find something according to your preferences.\nThe more description and details you write, the better we can choose a game for you!')


@dp.message()
async def send_back(message: Message):
    input_text = message.text
    comment_data = pd.read_csv(r'D:\PyCharm\pythonProject\cleaned_data.csv', sep=',')

    # Комментарии
    X_train = comment_data['comment']

    # Вектор игр
    y_train = comment_data['game_name']

    tfidf_vectorizer = TfidfVectorizer()
    X_train_tfidf = tfidf_vectorizer.fit_transform(X_train.values.astype('U'))

    X_train, X_val, y_train, y_val = train_test_split(X_train_tfidf, y_train, test_size=0.2, random_state=42)

    # Обучение модели
    rf_clf = KNeighborsClassifier()
    rf_clf.fit(X_train, y_train)
    # parametrs = {'n_neighbors': range(1, 10, 4),
    #              'weights': ['uniform', 'distance'],
    #              'leaf_size': range(1, 100, 10)}
    # grid = GridSearchCV(rf_clf, parametrs, cv=5, verbose=3)
    # grid.fit(X_train, y_train)
    # print(grid.best_params_)
    # print(grid.best_score_)

    # Комментарий пользователя
    user_comment = tfidf_vectorizer.transform([input_text])

    answer=str(rf_clf.predict(user_comment))
    answer=answer.replace("[", "").replace("]", "").replace("'", "")
    # Результат
    #print(rf_clf.predict(user_comment))

    await message.reply(text=answer)

if __name__ == '__main__':
    dp.run_polling(bot)
